math.class.size <- dplyr::rename(size.x=math.size., size.y=english.size  )
math.class.size <- dplyr::rename(size.x=math.size, size.y=english.size)
math.class.size <- dplyr::rename(math.class.size,size.x=math.size, size.y=english.size)
math.class.size <- dplyr::rename(math.class.size,math.size = size.x, english.size = size.y)
both.class.size <- merge(math.class.size,english.class.size,by.x="district",by.y="district")
both.class.size <- dplyr::rename(both.class.size,math.size = size.x, english.size = size.y)
both.class.size
both.class.size <- select(math.class.size, -subject.x, -subject.y)
both.class.size <- select(both.class.size, -subject.x, -subject.y)
head(both.class.size)
View(both.class.size)
processed.class.size <- select(both.class.size, -subject.x, -subject.y)
both.class.size <- merge(math.class.size,english.class.size,by.x="district",by.y="district")
both.class.size <- dplyr::rename(both.class.size,math.size = size.x, english.size = size.y)
processed.class.size <- select(both.class.size, -subject.x, -subject.y)
attendance.read <- read.csv("./dev/data/School_Attendance_and_Enrollment_Statistics_by_District__2010-11_.csv",  stringsAsFactors=FALSE , header=T)  # School Attendance File
ethnicity.assistance.read <- read.csv("./dev/data/School_District_Breakdowns.csv", stringsAsFactors=FALSE, header=T) #Read race_breakdown
class.size.read <- read.csv("./dev/data/2010-2011_Class_Size_-_District-level_Summary.csv", stringsAsFactors=FALSE, header=T) #Read class_size_data
sat.scores.read <- read.csv("./dev/data/SAT__College_Board__2010_School_Level_Results.csv", stringsAsFactors=FALSE, header=T) #Read SAT_Score_data
attendance <- tbl_df(attendance.read)
attendance <-  rename(attendance,
district = District,
attendance.rate = YTD...Attendance..Avg.,
total.students = YTD.Enrollment.Avg.)
attendance$district <- as.integer(substring(attendance$district , first=10 , last=11))
attendance.in <- filter(attendance,district > 0 )
attendance <- NULL
attendance <- tbl_df(attendance.read)
attendance <-  rename(attendance,
district = District,
attendance.rate = YTD...Attendance..Avg.,
total.students = YTD.Enrollment.Avg.)
attendance <-  dplyr::rename(attendance,
district = District,
attendance.rate = YTD...Attendance..Avg.,
total.students = YTD.Enrollment.Avg.)
attendance$district <- as.integer(substring(attendance$district , first=10 , last=11))
attendance.in <- filter(attendance,district > 0 )
attendance <- NULL
View(attendance.in)
ethnicity.assistance <- tbl_df(ethnicity.assistance.read)
ethnicity.assistance <- select (ethnicity.assistance,one_of(
"JURISDICTION.NAME",
"PERCENT.FEMALE",
"PERCENT.MALE",
"PERCENT.HISPANIC.LATINO",
"PERCENT.ASIAN.NON.HISPANIC",
"PERCENT.WHITE.NON.HISPANIC",
"PERCENT.BLACK.NON.HISPANIC",
"PERCENT.US.CITIZEN",
"PERCENT.RECEIVES.PUBLIC.ASSISTANCE"
))
ethnicity.assistance$district <- as.integer(substring(ethnicity.assistance$JURISDICTION.NAME , first=5 , last=6))
ethnicity.assistance <- mutate(ethnicity.assistance,
PERCENT.BLACK.HISPANIC = PERCENT.HISPANIC.LATINO +
PERCENT.BLACK.NON.HISPANIC)
ethnicity.assistance.in <- select(ethnicity.assistance, -JURISDICTION.NAME)
ethnicity.assistance <- NULL
head(ethnicity.assistance.in)
View(ethnicity.assistance.in)
class.size <- tbl_df(class.size.read)
class.size <-  filter(class.size, GRADE=="09-12", PROGRAM.TYPE == "GEN ED" ,
CORE.SUBJECT..MS.CORE.and.9.12.ONLY. %in% c("ENGLISH","MATH"))
class.size <- select(class.size, -BORO, -GRADE, -PROGRAM.TYPE,
-SERVICE.CATEGORY.K.9..ONLY.,
-CORE.COURSE..MS.CORE.and.9.12.ONLY.,
-AVERAGE.CLASS.SIZE )
class.size <-  dplyr::rename(class.size,
district = CSD,
subject = CORE.SUBJECT..MS.CORE.and.9.12.ONLY.,
students = NUMBER.OF.STUDENTS...SEATS.FILLED,
classes = NUMBER.OF.SECTIONS)
class.group.by <- group_by(class.size,district,subject)
class.summary <- dplyr::summarise(class.group.by, students.total=sum(students), classes.total=sum(classes))
class.summary <- mutate(class.summary, size=students.total/classes.total)
class.summary <- select(class.summary, - students.total, -classes.total)
math.class.size <- filter(class.summary, subject=="MATH")
english.class.size <- filter(class.summary, subject=="ENGLISH")
both.class.size <- merge(math.class.size,english.class.size,by.x="district",by.y="district")
both.class.size <- dplyr::rename(both.class.size,math.size = size.x, english.size = size.y)
class.size.in <- select(both.class.size, -subject.x, -subject.y)
math.class.size <- class.group.by <- class.size <- english.class.size <- class.summary <- both.class.size <- NULL
View(class.size.in)
sat.scores.in <- tbl_df(sat.scores.read)
sat.scores.in$district <- as.integer(substring(sat.scores.in$DBN , first=1 , last=2))
sat.scores.in$Number.of.Test.Takers = as.integer(sat.scores.in$Number.of.Test.Takers)
sat.scores.in$Critical.Reading.Mean = as.numeric(sat.scores.in$Critical.Reading.Mean)
sat.scores.in$Mathematics.Mean = as.numeric(sat.scores.in$Mathematics.Mean)
sat.scores.in$Writing.Mean = as.numeric(sat.scores.in$Writing.Mean)
sat.scores.in = filter(sat.scores.in,Number.of.Test.Takers > 0)
sat.scores.in <- mutate(sat.scores.in, math.total = Mathematics.Mean * Number.of.Test.Takers , reading.total =  Critical.Reading.Mean *  Number.of.Test.Takers ,  writing.total =  Writing.Mean *  Number.of.Test.Takers )
sat.scores.in = select(sat.scores.in, -DBN, -School.Name, -Critical.Reading.Mean, -Mathematics.Mean, -Writing.Mean)
sat.group.by <- group_by (sat.scores.in,district)
sat.scores.in <- summarise(sat.group.by, students.total=sum(Number.of.Test.Takers), math.total=sum(math.total), reading.total=sum(reading.total), writing.total=sum(writing.total) )
sat.scores.in <- transmute(sat.scores.in, district=district,math.mean=math.total/students.total,  reading.mean=reading.total/students.total,  writing.mean=writing.total/students.total )
str(sat.scores.in)
sat.scores.in <- tbl_df(sat.scores.read)
sat.scores.in$district <- as.integer(substring(sat.scores.in$DBN , first=1 , last=2))
sat.scores.in$Number.of.Test.Takers = as.integer(sat.scores.in$Number.of.Test.Takers)
sat.scores.in$Critical.Reading.Mean = as.numeric(sat.scores.in$Critical.Reading.Mean)
sat.scores.in$Mathematics.Mean = as.numeric(sat.scores.in$Mathematics.Mean)
sat.scores.in$Writing.Mean = as.numeric(sat.scores.in$Writing.Mean)
sat.scores.in = filter(sat.scores.in,Number.of.Test.Takers > 0)
sat.scores.in <- mutate(sat.scores.in, math.total = Mathematics.Mean * Number.of.Test.Takers , reading.total =  Critical.Reading.Mean *  Number.of.Test.Takers ,  writing.total =  Writing.Mean *  Number.of.Test.Takers )
sat.scores.in = select(sat.scores.in, -DBN, -School.Name, -Critical.Reading.Mean, -Mathematics.Mean, -Writing.Mean)
sat.group.by <- group_by (sat.scores.in,district)
sat.scores.in <- summarise(sat.group.by, students.total=sum(Number.of.Test.Takers), math.total=sum(math.total), reading.total=sum(reading.total), writing.total=sum(writing.total) )
sat.scores.in <- transmute(sat.scores.in, district=district,math.mean=math.total/students.total,  reading.mean=reading.total/students.total,  writing.mean=writing.total/students.total )
View(sat.scores.in)
View(sat.scores.in)
sat.scores.in <- dplyr::summarise(sat.group.by, students.total=sum(Number.of.Test.Takers), math.total=sum(math.total), reading.total=sum(reading.total), writing.total=sum(writing.total) )
sat.scores.in <- transmute(sat.scores.in, district=district,math.mean=math.total/students.total,  reading.mean=reading.total/students.total,  writing.mean=writing.total/students.total )
str(sat.scores.in)
View(sat.scores.in)
sat.scores.in <- tbl_df(sat.scores.read)
sat.scores.in$district <- as.integer(substring(sat.scores.in$DBN , first=1 , last=2))
sat.scores.in$Number.of.Test.Takers = as.integer(sat.scores.in$Number.of.Test.Takers)
sat.scores.in$Critical.Reading.Mean = as.numeric(sat.scores.in$Critical.Reading.Mean)
sat.scores.in$Mathematics.Mean = as.numeric(sat.scores.in$Mathematics.Mean)
sat.scores.in$Writing.Mean = as.numeric(sat.scores.in$Writing.Mean)
sat.scores.in = filter(sat.scores.in,Number.of.Test.Takers > 0& district <= 32)
sat.scores.in <- mutate(sat.scores.in, math.total = Mathematics.Mean * Number.of.Test.Takers , reading.total =  Critical.Reading.Mean *  Number.of.Test.Takers ,  writing.total =  Writing.Mean *  Number.of.Test.Takers )
sat.scores.in = select(sat.scores.in, -DBN, -School.Name, -Critical.Reading.Mean, -Mathematics.Mean, -Writing.Mean)
sat.group.by <- group_by (sat.scores.in,district)
sat.scores.in <- dplyr::summarise(sat.group.by, students.total=sum(Number.of.Test.Takers), math.total=sum(math.total), reading.total=sum(reading.total), writing.total=sum(writing.total) )
sat.scores.in <- transmute(sat.scores.in, district=district,math.mean=math.total/students.total,  reading.mean=reading.total/students.total,  writing.mean=writing.total/students.total )
str(sat.scores.in)
sat.group.by <- NULL
require(plyr)
school.district.data <- join_all(list(class.size.in,ethnicity.assistance.in,satscores.in,attendance.in), by = 'district', type = 'full')
school.district.data <- join_all(list(class.size.in,ethnicity.assistance.in,sat.scores.in,attendance.in), by = 'district', type = 'full')
school.district.data
View(school.district.data)
library(gbm)
install.packages("gbm")
install.packages("gbm")
library(gbm)
fit.math <- gbm(math.mean ~ ., data=school.district.data, dist="adaboost", n.tree = 50,
shrinkage = 1)
fit.math <- gbm(math.mean ~ ., data=school.district.data, dist="adaboost", n.tree = 5,
shrinkage = 1)
fit.math <- gbm(math.mean ~ ., data=school.district.data, dist="adaboost", n.tree = 1,
shrinkage = 1)
qplot?
qplot?
qplot?
qplot?
p <- ggplot(school.district.data, aes(x=attendance.rate, y=math.mean)
p
ggplot(school.district.data, aes(x=attendance.rate, y=math.mean)
(ggplot(school.district.data, aes(x=attendance.rate, y=math.mean))
(ggplot(school.district.data, aes(x=attendance.rate, y=math.mean))
p <- (ggplot(school.district.data, aes(x=attendance.rate, y=math.mean))
(ggplot(school.district.data, aes(x=attendance.rate, y=math.mean))
install.packages("shiny")
library("shiny")
getwd()
runApp("./dev/Project")
setwd("./dev/Project")
run_app()
runApp()
shiny::runApp()
shiny::runApp()
runExample("01_hello")
runApp()
x = seq(0, 8*pi, length.out=100)
y = sin(x) + rnorm(100, sd=0.3)
plot(x,y)
model1 = loess(y ~ x, span=0.4)
lines(x, model1$fit, col='red', lty=2, lwd=2)
model2 = loess(y ~ x, span=0.8)
lines(x, model2$fit, col='blue',lty=2, lwd=2)
model3 = loess(y ~ x, span=0.2)
lines(x, model2$fit, col='green',lty=2, lwd=2)
model3 = loess(y ~ x, span=0.2)
lines(x, model3$fit, col='green',lty=2, lwd=2)
model2 = loess(y ~ x, span=0.8)
lines(x, model2$fit, col='blue',lty=2, lwd=2)
predict(model2, data.frame(x))
plot(model1$resid ~ model1$fit)
plot(model3$resid ~ model1$fit)
plot(model3$resid ~ model3$fit)
library(splines)
model1 = lm(y ~ bs(x, df=10, degree=1)) #segmented
prey = predict(model1, newdata=list(x))
plot(x, y)
lines(x, prey, lwd=1, col="red")
lines(x, prey, lwd=1, col="red")
install.packages("MASS")
names(Boston)
library("MASS")
names(Boston)
plot(lstat,medv)
plot(lstat,medv,data=Boston)
attach(Boston)
plot(lstat,medv)
model1 = loess(medv ~ lstat, span=0.4)
lines(medv, model1$fit, col='red', lty=2, lwd=2)
plot(medv,lstat)
model1 = loess(medv ~ lstat, span=0.4)
lines(medv, model1$fit, col='red', lty=2, lwd=2)
plot(lstat,medv)
medvmodel = loess(medv ~ lstat, span=0.2)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
?Boston
?Boston
help(Boston)
medvmodel = loess(medv ~ lstat, span=0.4)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
medvmodel = loess(medv ~ lstat, span=0.8)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
plot(lstat,medv)
medvmodel = loess(medv ~ lstat, span=0.1)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
medvmodel = loess(medv ~ lstat, span=0.5)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
library(splines)
splmodel = lm(medv ~ bs(lstat, df=10, degree=1)) #segmented
prey = predict(splmodel, newdata=medv)
splmodel = lm(medv ~ bs(lstat, df=10, degree=1)) #segmented
prey = predict(splmodel,medv)
plot(lstat, medv)
lines(x, prey, lwd=1, col="red")
lines(lstat, prey, lwd=1, col="red")
prey = predict(splmodel,medv)
splmodel = lm(medv ~ bs(lstat, df=10, degree=1)) #segmented
summary(splmodel)
prey = predict(splmodel,newdata=list(medv))
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
model = gam(medv ~ s(lsat) + s(rm), s(crm), data=Boston)
library(mgcv)
model = gam(medv ~ s(lsat) + s(rm), s(crm), data=Boston)
model = gam(medv ~ s(lstat) + s(rm), s(crm), data=Boston)
model = gam(medv ~ s(lstat) + s(rm) + s(crm), data=Boston)
model = gam(medv ~ s(lstat) + s(rm) + s(crim), data=Boston)
par(mfrow=c(1,2))
par(mfrow=c(1,3))
plot(model, se=T, resid=T, pch=16)
library(splines)
splmodel = lm(medv ~ bs(lstat, df=1, degree=1)) #segmented
summary(splmodel)
prey = predict(splmodel,newdata=list(medv))
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
splmodel = lm(medv ~ bs(lstat, df=2, degree=1)) #segmented
summary(splmodel)
prey = predict(splmodel,newdata=list(medv))
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
splmodel = lm(medv ~ bs(lstat, df=3, degree=1)) #segmented
summary(splmodel)
prey = predict(splmodel,newdata=list(medv))
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
splmodel = lm(medv ~ bs(lstat, df=4, degree=1)) #segmented
summary(splmodel)
prey = predict(splmodel,newdata=list(medv))
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
medvmodel = loess(medv ~ lstat, span=0.5)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(lstat ~ medv, span=0.5)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(medv ~ lstat, span=0.5)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(medv ~ lstat, span=0.4)
lines(medv, medvmodel$fit, col='red', lty=2, lwd=2)
library(mgcv)
model = gam(medv ~ s(lstat) + s(rm) + s(crim), data=Boston)
par(mfrow=c(1,3))
plot(model, se=T, resid=T, pch=16)
gammodel = gam(medv ~ s(lstat) + s(rm) + s(crim), data=Boston)
par(mfrow=c(1,3))
plot(gammodel, se=T, resid=T, pch=16)
gam.check(gammodel)
medvmodel = loess(medv ~ lstat, span=0.4)
medvmodel = loess(medv ~ lstat, span=0.4, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
plot(medv,lstat)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(medv ~ lstat, span=0.5, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
plot(medv,lstat)
medvmodel = loess(medv ~ lstat, span=0.5, data=Boston)
medvmodel = loess(medv ~ lstat, span=0.5, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
medvmodel = loess(medv ~ lstat, span=0.3, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
par(mfrow=c(1,1))
plot(medv,lstat)
medvmodel = loess(medv ~ lstat, span=0.3, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(medv ~ lstat, span=0.2, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
medvmodel = loess(medv ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
par(mfrow=c(1,1))
plot(medv,lstat)
medvmodel = loess(medv ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
predict(medvmodel, medv)
plot(medvmodel$resid ~ medvmodel$fit)
medvmodel = loess(medv ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=2, lwd=2)
plot(lstat, medv)
lines(lstat, prey, lwd=1, col="red")
par(mfrow=c(1,3))
plot(gammodel, se=T, resid=T, pch=16)
par(mfrow=c(1,1))
plot(medv,lstat)
medvmodel = loess(medv ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=1, lwd=1)
medvmodel = loess(order(medv) ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=1, lwd=1)
plot(medv,lstat)
medvmodel = loess(order(medv) ~ lstat, span=0.6, data=Boston)
plot(order(medv),lstat)
medvmodel = loess(order(medv) ~ lstat, span=0.6, data=Boston)
lines(lstat, medvmodel$fit, col='red', lty=1, lwd=1)
rm(ls())
ls()
rm(ls())
?rm
remove(Boston)
detach(Boston)
library(ggplot2)
plotdata = data.frame(z, pr, y)
set.seed(1)
b0 = 1
b1 = 2
b2 = 3
x1 = rnorm(1000)
x2 = rnorm(1000)
z  = b0 +b1*x1 + b2*x2
pr = 1/(1+exp(-z))       # pass through inv-logit function
y = rbinom(1000, 1, pr)  # bernoulli response variable
library(ggplot2)
plotdata = data.frame(z, pr, y)
p = ggplot(data=plotdata, aes(x=z, y=y)) +
geom_point(color='red4') +
geom_point(aes(y=pr), color='skyblue')
p = ggplot(data=plotdata, aes(x=z, y=y)) +
geom_point(color='red4') +
geom_point(aes(y=pr), color='skyblue')
plotdata = data.frame(z, pr, y)
p = ggplot(data=plotdata, aes(x=z, y=y)) +
geom_point(color='red4') +
geom_point(aes(y=pr), color='skyblue')
library(ggplot2)
plotdata = data.frame(z, pr, y)
p = ggplot(data=plotdata, aes(x=z, y=y)) +
geom_point(color='red4') +
geom_point(aes(y=pr), color='skyblue')
plotdata = data.frame(x1, x2, y=factor(y))
p = ggplot(data=plotdata, aes(x=x1, y=x2, color=y)) +
geom_point()
print(p)
head(y)
xmat = cbind(1, x1, x2)
sigmoid = function(x) {
return(1/(1+exp(-x)))
}
gradascent = function(xmat,y){
m = ncol(xmat)
n = nrow(xmat)
alpha = 0.001
maxcycles = 500
weights = rep(1,m)
for (k in 1:maxcycles) {
h = sigmoid(xmat %*% weights)
error = y - h
weights = weights + alpha * t(xmat) %*% error
}
return(weights)
}
w = gradascent(xmat, y)
inter = -w[1]/w[3]
slope = -w[2]/w[3]
plotdata = data.frame(xmat[,2:3], y=factor(y))
p = ggplot(data=plotdata, aes(x=x1, y=x2, color=y)) +
geom_point() +
geom_abline(intercept=inter, slope=slope)
p = ggplot(data=plotdata, aes(x=x1, y=x2, color=y)) +
geom_point() +
geom_abline(intercept=inter, slope=slope)
head(xmat)
plotdata = data.frame(xmat[,2:3], y=factor(y))
p = ggplot(data=plotdata, aes(x=x1, y=x2, color=y)) +
geom_point() +
geom_abline(intercept=inter, slope=slope)
p
data = read.csv('./dev/data', colclasses = c('factor,'factor','numeric','factor')
data = read.csv('./dev/data/school.csv', colclasses = c('factor,'factor','numeric','factor')
data = read.csv('./dev/data/school.csv',
colclasses = c('factor,'factor','numeric','factor'))
data = read.csv('./dev/data/school.csv',
colclasses = c('factor',factor','numeric','factor'))
data = read.csv('./dev/data/school.csv',
colclasses=c('factor','factor','numeric','factor'))
data = read.csv('./dev/data/school.csv',
colClasses = c('factor','factor','numeric','factor'))
getwd()
setwd("Users/sundar")
setwd("/Users/sundar")
data = read.csv('./dev/data/school.csv',
colClasses = c('factor','factor','numeric','factor'))
head(data, 3)
summary(data)
hist(data$gr)
library(psych)
install.packages("psych")
pairs.panels(data)
library(psych)
pairs.panels(data)
table(data$y, data$sch)
model = glm(y ~ . , data, family='binomial')
summary(model)
getwd()
driver1 <- read.table("./dev/data/NYCDSA_Jason/data/Rdriver1.RData")
driver1 <- load("./dev/data/NYCDSA_Jason/data/Rdriver1.RData")
head(driver1)
head(driver1)
load("./dev/data/NYCDSA_Jason/data/Rdriver1.RData", driver1 <- new.env())
View(data)
head(driver1)
load("./dev/data/NYCDSA_Jason/data/Rdriver1.RData")
head(data)
attr <- load("./dev/data/NYCDSA_Jason/attr/Rdriver1.RData")
head(data)
save(driver1, file = "./dev/data/NYCDSA_Jason/data/Rdriver1.RData")
save(the_table, file = "./dev/data/NYCDSA_Jason/data/Rdriver1.RData")
x <- seq(1:10)
y <- 1 + 2x
y <- (1 + 2x)
y <- 1 + 2*x
plot(x,y)
x <- seq(1:10)
y <- 1 + 2^x
plot(x,y)
y <- 1 + 2*x - 3x^2
y <- 1 + 2*x - 3*x^2
plot(x,y)
y <- 1 + 2*x + 3*x^2
plot(x,y)
y <- 1 + 2*x + 3*x^2 + 4*x^4
plot(x,y)
install.packages("tm")
?tm
library(tm)
?tm
source("./1_load_files.R")
setwd("~/dev/Projects/1_EDA_NYC_school_data/")
library("dplyr")
library("plyr")
library("tidyr")
library("xlsx")
library("caret")
library("car")
library("leaps")
library("ggthemes")
library("gridExtra")
source("./1_load_files.R")
source("./2_tidy.R")
lm.performance <- lm(total.percent ~ poverty.ratio+size+female.ratio, data=scaled.district.data)
summary(lm.performance)
povertyPlot <- qplot(poverty.ratio,total.percent,data=district.model.features, xlab="Poverty Ratio",ylab="Score",main="Performance Vs Poverty") +
geom_smooth(method=lm,formula=y~poly(x,2)) +theme_economist()
sizePlot <- qplot(size,total.percent,data=district.model.features,xlab="Class Size",ylab="Score",main="Performance Vs Class size ") +
geom_smooth(method=lm,formula=y~poly(x,2)) +theme_economist()
grid.arrange(povertyPlot, sizePlot, ncol=2)
povertyPlot <- qplot(poverty.ratio,total.percent,data=district.model.features, xlab="Poverty Ratio",ylab="Score",main="Performance Vs Poverty") +
geom_smooth(method=lm,formula=y~poly(x,2)) +theme_economist()
district.model.features <- select(scaled.district.data,-14)
povertyPlot <- qplot(poverty.ratio,total.percent,data=scaled.district.data, xlab="Poverty Ratio",ylab="Score",main="Performance Vs Poverty") +
geom_smooth(method=lm,formula=y~poly(x,2)) +theme_economist()
sizePlot <- qplot(size,total.percent,data=scaled.district.data,xlab="Class Size",ylab="Score",main="Performance Vs Class size ") +
geom_smooth(method=lm,formula=y~poly(x,2)) +theme_economist()
grid.arrange(povertyPlot, sizePlot, ncol=2)
View(scaled.district.data)
scaled.district.data <- mutate(scaled.district.data, score.change = ((total.percent2014-total.percent)/total.percent))
scaled.district.data <- mutate(scaled.district.data, score.change = ((total.percent.2014-total.percent)/total.percent))
View(scaled.district.data)
boxplot(score.change~sizegroup,data=scaled.district.data,
main="Change in SAT score 2014 Vs 2010",
xlab="Class Size", ylab="Score Change",
col=c("lightgreen","lightblue","lightyellow","orange"),
notch = TRUE)
boxplot(score.change~sizegroup,data=scaled.district.data,
main="Change in SAT score 2014 Vs 2010",
xlab="Class Size", ylab="Score Change",
col=c("lightgreen","lightblue","lightyellow","orange"),
notch = TRUE,outline=FALSE))
boxplot(score.change~sizegroup,data=scaled.district.data,
main="Change in SAT score 2014 Vs 2010",
xlab="Class Size", ylab="Score Change",
col=c("lightgreen","lightblue","lightyellow","orange"),
notch = TRUE,outline=FALSE)
